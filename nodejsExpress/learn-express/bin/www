#!/usr/bin/env node

// 1 start
// app, debug, http 모듀들을 가져온다. debug 모듈은 콘솔에 로그를 남기는 모듈이다
var app = require("../app");
var debug = require("debug")("learn-express:server");
var http = require("http");
// 1 end

// 2 start
// app.set('port', port)로 서버가 실행될 포트를 설정한다. process.env 객체에 PORT 속성이 있다면 그 값을 사용하고,
// 없다면 기본값으로 3000번 포트를 이용하도록 되어 있다.이렇게 app.set(키, 값)을 사용해서 데이터를 저장할 수 있다.
// 나중에 데이터를 app.get(키)로 가져올 수 있다.
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
// 2 end

// 3 start
// http.createServer에 불러온 app 모듈을 넣어준다. app 모듈이 createServer 메서드의 콜백 함수 역할을 한다.
var server = http.createServer(app);
// 3 end

// 4 start
// listen을 하는 부분은 http 웹 서버와 동일하다. 4장에서 서버를 구동했던 것과 동일하게 포트를 연결하고 서버를
// 실행한다. 익스프레스는 그저 콜백 함수 부분을 조금 다르게 만든 것이다.
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
// 4 end

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
